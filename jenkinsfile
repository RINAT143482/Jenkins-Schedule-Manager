pipeline { // תחילת הגדרת ה-Pipeline
    agent any  // קובע שה-Pipeline ירוץ על כל סוכן (Node) זמין

    parameters { // הגדרת פרמטרים שהמשתמש יכול להזין לפני הרצת ה-Pipeline
        string(name: 'DAY', defaultValue: 'Monday', description: 'Enter the day of the class') // פרמטר למשתמש: יום השיעור (ברירת מחדל: Monday)
        string(name: 'TIME', defaultValue: '10:00', description: 'Enter the time of the class') // פרמטר למשתמש: שעה (ברירת מחדל: 10:00)
        string(name: 'SUBJECT', defaultValue: 'Math', description: 'Enter the subject of the class') // פרמטר למשתמש: נושא השיעור (ברירת מחדל: Math)
    }

    stages { // הגדרת השלבים של ה-Pipeline

        stage('Checkout') { // שלב ראשון: הורדת הקוד מ-GitHub
            steps { // הגדרת הצעדים שיבוצעו בשלב זה
                script { // מאפשר הרצת קוד Groovy בתוך שלב זה
                    echo 'Checking out the repository...' // הדפסת הודעה ללוג שמתחילים תהליך ה-Checkout
                    checkout([ // מבצע Clone למאגר GitHub
                        $class: 'GitSCM', // מציין שהשימוש הוא במערכת ניהול גרסאות Git
                        branches: [[name: '*/main']], // מושך את הענף הראשי (main)
                        userRemoteConfigs: [[
                            url: 'https://github.com/RINAT143482/Jenkins-Schedule-Manager.git', // כתובת ה-Repository של GitHub
                            credentialsId: 'github-creds' // מזהה של האישורים (Credentials) שנשמרו ב-Jenkins
                        ]]
                    ])
                }
            }
        }

        stage('Execute PowerShell Script') { // שלב שני: הפעלת סקריפט PowerShell
            steps { // הגדרת הצעדים שיבוצעו בשלב זה
                script { // מאפשר הרצת קוד Groovy בתוך שלב זה
                    echo 'Running PowerShell schedule manager script...' // הדפסת הודעה ללוג שהסקריפט רץ
                    powershell script: ".\\proj.ps1 -Day ${params.DAY} -Time ${params.TIME} -Subject ${params.SUBJECT}" 
                    // הרצת הסקריפט `proj.ps1` עם הפרמטרים שהוזנו
                }
            }
        }

        stage('Publish HTML Report') { // שלב שלישי: פרסום דוח HTML
            steps { // הגדרת הצעדים שיבוצעו בשלב זה
                script { // מאפשר הרצת קוד Groovy בתוך שלב זה
                    echo 'Publishing HTML output...' // הדפסת הודעה ללוג
                    publishHTML(target: [ // שימוש בפלאגין של Jenkins לפרסום HTML
                        allowMissing: false, // אם הקובץ חסר, ה-Pipeline ייכשל
                        alwaysLinkToLastBuild: true, // הקובץ תמיד יהיה מקושר להרצה האחרונה
                        keepAll: true, // שומר את כל הגרסאות של הדוח
                        reportDir: 'output', // תיקייה שבה הדוח נמצא
                        reportFiles: 'schedule.html', // שם הקובץ שמפורסם
                        reportName: 'Schedule Report' // שם הדוח שיופיע ב-Jenkins
                    ])
                }
            }
        }
    }

    post { // פעולות שמתבצעות לאחר סיום ה-Pipeline
        success { // אם ה-Pipeline הצליח
            echo 'Pipeline completed successfully!' // מדפיס הודעת הצלחה
        }
        failure { // אם ה-Pipeline נכשל
            echo 'Pipeline failed!' // מדפיס הודעת כישלון
        }
    }
}
